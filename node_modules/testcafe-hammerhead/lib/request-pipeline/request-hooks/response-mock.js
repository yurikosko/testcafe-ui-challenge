"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const incoming_message_like_1 = __importDefault(require("../incoming-message-like"));
const content_type_1 = require("../../utils/content-type");
const builtin_header_names_1 = __importDefault(require("../builtin-header-names"));
const PAGE_CONTENT_TYPE = 'text/html; charset=utf-8';
const EMPTY_PAGE_HTML = '<html><body></body></html>';
const INVALID_BODY_PARAMETER_TYPES = ['number', 'boolean'];
const INVALID_STATUS_CODE_MESSAGE = 'Invalid status code. It should be a number that is greater than 100 and less than 999.';
class ResponseMock {
    constructor(body, statusCode, headers) {
        this.requestOptions = null;
        this.body = body;
        this.statusCode = statusCode;
        this.headers = this._lowerCaseHeaderNames(headers);
        this._validateParameters();
    }
    _lowerCaseHeaderNames(headers) {
        if (!headers)
            return headers;
        const lowerCaseHeaders = {};
        Object.keys(headers).forEach(headerName => {
            lowerCaseHeaders[headerName.toLowerCase()] = headers[headerName];
        });
        return lowerCaseHeaders;
    }
    _validateBody() {
        const bodyType = typeof this.body;
        if (INVALID_BODY_PARAMETER_TYPES.includes(bodyType))
            throw new TypeError(`The 'body' parameter has an invalid type - ${bodyType}.`);
    }
    _validateStatusCode() {
        if (this.statusCode === void 0)
            return;
        if (typeof this.statusCode !== 'number')
            throw new TypeError(INVALID_STATUS_CODE_MESSAGE);
        let statusCode = parseInt(this.statusCode, 10);
        // NOTE: for Infinity case
        statusCode |= 0;
        if (statusCode < 100 || statusCode > 999)
            throw new TypeError(INVALID_STATUS_CODE_MESSAGE);
    }
    _validateHeaders() {
        if (this.headers === void 0)
            return;
        if (typeof this.headers !== 'object')
            throw new TypeError('Invalid type of the \'headers\' parameter. It should be an object.');
    }
    _validateParameters() {
        this._validateBody();
        this._validateStatusCode();
        this._validateHeaders();
    }
    _getContentType() {
        if (this.body !== null && typeof this.body === 'object')
            return content_type_1.JSON_MIME;
        return PAGE_CONTENT_TYPE;
    }
    setRequestOptions(opts) {
        this.requestOptions = opts;
    }
    async getResponse() {
        let response = {
            headers: { [builtin_header_names_1.default.contentType]: this._getContentType() },
            statusCode: this.statusCode
        };
        if (this.headers)
            response.headers = Object.assign(response.headers, this.headers);
        if (this.body === void 0)
            response.body = EMPTY_PAGE_HTML;
        else if (typeof this.body === 'function') {
            response.setBody = value => {
                response.body = value;
            };
            response = Object.assign(response, await this.body(this.requestOptions, response));
            delete response.setBody;
        }
        else
            response.body = this.body;
        response.headers = this._lowerCaseHeaderNames(response.headers);
        return new incoming_message_like_1.default(response);
    }
}
exports.default = ResponseMock;module.exports = exports.default;

