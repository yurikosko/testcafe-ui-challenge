"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const compiler_1 = __importDefault(require("../../compiler"));
const test_run_proxy_1 = __importDefault(require("./test-run-proxy"));
const test_structure_1 = require("../serialization/test-structure");
const io_1 = require("./io");
const proxy_1 = require("../utils/ipc/proxy");
const transport_1 = require("../utils/ipc/transport");
const source_map_support_1 = __importDefault(require("source-map-support"));
const protocol_1 = require("./protocol");
const process_title_1 = __importDefault(require("../process-title"));
source_map_support_1.default.install({
    hookRequire: true,
    handleUncaughtExceptions: false,
    environment: 'node'
});
class CompilerService {
    constructor() {
        process.title = process_title_1.default.service;
        const input = fs_1.default.createReadStream('', { fd: io_1.SERVICE_INPUT_FD });
        const output = fs_1.default.createWriteStream('', { fd: io_1.SERVICE_OUTPUT_FD });
        this.proxy = new proxy_1.IPCProxy(new transport_1.ServiceTransport(input, output, io_1.SERVICE_SYNC_FD));
        this.state = this._initState();
        this._setupRoutes();
        this.ready();
    }
    _initState() {
        return {
            testRuns: {},
            fixtureCtxs: {},
            units: {},
            options: {}
        };
    }
    _ensureTestRunProxy(testRunId, fixtureCtx) {
        if (!this.state.testRuns[testRunId])
            this.state.testRuns[testRunId] = new test_run_proxy_1.default(this, testRunId, fixtureCtx, this.state.options);
        return this.state.testRuns[testRunId];
    }
    _getFixtureCtx({ id }) {
        const unit = this.state.units[id];
        const fixtureId = test_structure_1.isTest(unit) ? unit.fixture.id : unit.id;
        if (!this.state.fixtureCtxs[fixtureId])
            this.state.fixtureCtxs[fixtureId] = Object.create(null);
        return this.state.fixtureCtxs[fixtureId];
    }
    _getContext(args) {
        const { testRunId } = args;
        const fixtureCtx = this._getFixtureCtx(args);
        if (!testRunId)
            return fixtureCtx;
        return this._ensureTestRunProxy(testRunId, fixtureCtx);
    }
    _setupRoutes() {
        this.proxy.register([
            this.getTests,
            this.runTest,
            this.cleanUp,
            this.setOptions
        ], this);
    }
    _getFunction(unit, functionName) {
        if (test_structure_1.isTest(unit) && protocol_1.isTestFunctionProperty(functionName))
            return unit[functionName];
        if (test_structure_1.isFixture(unit) && protocol_1.isFixtureFunctionProperty(functionName))
            return unit[functionName];
        throw new Error();
    }
    async setOptions({ value }) {
        this.state.options = value;
    }
    async ready() {
        this.proxy.call(this.ready);
    }
    async cleanUp() {
        await compiler_1.default.cleanUp();
    }
    async getTests({ sourceList, compilerOptions }) {
        const compiler = new compiler_1.default(sourceList, compilerOptions);
        const tests = await compiler.getTests();
        const units = test_structure_1.flatten(tests);
        Object.assign(this.state.units, units);
        return test_structure_1.serialize(units);
    }
    async runTest(args) {
        const { id, functionName } = args;
        const unit = this.state.units[id];
        const context = this._getContext(args);
        const functionObject = this._getFunction(unit, functionName);
        if (!functionObject)
            throw new Error();
        return await functionObject(context);
    }
    async executeAction({ id, apiMethodName, command, callsite }) {
        return this.proxy.call(this.executeAction, { id, apiMethodName, command, callsite });
    }
    async executeCommand({ command, id }) {
        return this.proxy.call(this.executeCommand, { id, command });
    }
}
exports.default = new CompilerService();
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,