"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_run_tracker_1 = __importDefault(require("../../api/test-run-tracker"));
const prerender_callsite_1 = __importDefault(require("../../utils/prerender-callsite"));
const test_controller_1 = __importDefault(require("../../api/test-controller"));
const observed_callsites_storage_1 = __importDefault(require("../../test-run/observed-callsites-storage"));
const warning_log_1 = __importDefault(require("../../notifications/warning-log"));
const executor_1 = __importDefault(require("../../assertions/executor"));
const type_1 = __importDefault(require("../../test-run/commands/type"));
const serviceCommands = __importStar(require("../../test-run/commands/service"));
class TestRunProxy {
    constructor(dispatcher, id, fixtureCtx, options) {
        this.dispatcher = dispatcher;
        this.id = id;
        this.ctx = Object.create(null);
        this.fixtureCtx = fixtureCtx;
        this._options = options;
        // TODO: Synchronize these properties with their real counterparts in the main process.
        // Postponed until (GH-3244). See details in (GH-5250).
        this.controller = new test_controller_1.default(this);
        this.observedCallsites = new observed_callsites_storage_1.default();
        this.warningLog = new warning_log_1.default();
        test_run_tracker_1.default.activeTestRuns[id] = this;
    }
    _getAssertionTimeout(command) {
        // @ts-ignore
        const { timeout: commandTimeout } = command.options;
        return commandTimeout === void 0
            ? this._options.assertionTimeout
            : commandTimeout;
    }
    async _executeAssertion(command, callsite) {
        const assertionTimeout = this._getAssertionTimeout(command);
        const executor = new executor_1.default(command, assertionTimeout, callsite);
        executor.once('start-assertion-retries', timeout => this.executeCommand(new serviceCommands.ShowAssertionRetriesStatusCommand(timeout)));
        executor.once('end-assertion-retries', success => this.executeCommand(new serviceCommands.HideAssertionRetriesStatusCommand(success)));
        return executor.run();
    }
    async executeAction(apiMethodName, command, callsite) {
        if (callsite)
            callsite = prerender_callsite_1.default(callsite);
        if (command.type === type_1.default.assertion)
            return this._executeAssertion(command, callsite);
        return this.dispatcher.executeAction({ apiMethodName, command, callsite, id: this.id });
    }
    async executeCommand(command) {
        return this.dispatcher.executeCommand({ command, id: this.id });
    }
}
exports.default = TestRunProxy;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW4tcHJveHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvY29tcGlsZXIvdGVzdC1ydW4tcHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsa0ZBQXdEO0FBQ3hELHdGQUErRDtBQUcvRCxnRkFBdUQ7QUFDdkQsMkdBQWlGO0FBQ2pGLGtGQUF5RDtBQUV6RCx5RUFBMEQ7QUFFMUQsd0VBQXdEO0FBRXhELGlGQUFtRTtBQUduRSxNQUFNLFlBQVk7SUFXZCxZQUFvQixVQUFxQyxFQUFFLEVBQVUsRUFBRSxVQUFtQixFQUFFLE9BQWdDO1FBQ3hILElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBRTdCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBRWIsSUFBSSxDQUFDLEdBQUcsR0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUssT0FBTyxDQUFDO1FBRTFCLHVGQUF1RjtRQUN2Rix1REFBdUQ7UUFDdkQsSUFBSSxDQUFDLFVBQVUsR0FBVSxJQUFJLHlCQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksb0NBQXdCLEVBQUUsQ0FBQztRQUN4RCxJQUFJLENBQUMsVUFBVSxHQUFVLElBQUkscUJBQVUsRUFBRSxDQUFDO1FBRTFDLDBCQUFjLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM3QyxDQUFDO0lBRU8sb0JBQW9CLENBQUUsT0FBeUI7UUFDbkQsYUFBYTtRQUNiLE1BQU0sRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUVwRCxPQUFPLGNBQWMsS0FBSyxLQUFLLENBQUM7WUFDNUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCO1lBQ2hDLENBQUMsQ0FBQyxjQUFjLENBQUM7SUFDekIsQ0FBQztJQUVPLEtBQUssQ0FBQyxpQkFBaUIsQ0FBRSxPQUF5QixFQUFFLFFBQWlCO1FBQ3pFLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTVELE1BQU0sUUFBUSxHQUFHLElBQUksa0JBQWlCLENBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTVFLFFBQVEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksZUFBZSxDQUFDLGlDQUFpQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6SSxRQUFRLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxpQ0FBaUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkksT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxhQUFhLENBQUUsYUFBcUIsRUFBRSxPQUFnQixFQUFFLFFBQWlCO1FBQ2xGLElBQUksUUFBUTtZQUNSLFFBQVEsR0FBRyw0QkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUzQyxJQUFLLE9BQXVCLENBQUMsSUFBSSxLQUFLLGNBQVksQ0FBQyxTQUFTO1lBQ3hELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQTJCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFekUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRU0sS0FBSyxDQUFDLGNBQWMsQ0FBRSxPQUFnQjtRQUN6QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0NBQ0o7QUFFRCxrQkFBZSxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdFJ1blRyYWNrZXIgZnJvbSAnLi4vLi4vYXBpL3Rlc3QtcnVuLXRyYWNrZXInO1xuaW1wb3J0IHByZXJlbmRlckNhbGxzaXRlIGZyb20gJy4uLy4uL3V0aWxzL3ByZXJlbmRlci1jYWxsc2l0ZSc7XG5cbmltcG9ydCB7IFRlc3RSdW5EaXNwYXRjaGVyUHJvdG9jb2wgfSBmcm9tICcuL3Byb3RvY29sJztcbmltcG9ydCBUZXN0Q29udHJvbGxlciBmcm9tICcuLi8uLi9hcGkvdGVzdC1jb250cm9sbGVyJztcbmltcG9ydCBPYnNlcnZlZENhbGxzaXRlc1N0b3JhZ2UgZnJvbSAnLi4vLi4vdGVzdC1ydW4vb2JzZXJ2ZWQtY2FsbHNpdGVzLXN0b3JhZ2UnO1xuaW1wb3J0IFdhcm5pbmdMb2cgZnJvbSAnLi4vLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLWxvZyc7XG5pbXBvcnQgQXNzZXJ0aW9uQ29tbWFuZCBmcm9tICcuLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9hc3NlcnRpb24nO1xuaW1wb3J0IEFzc2VydGlvbkV4ZWN1dG9yIGZyb20gJy4uLy4uL2Fzc2VydGlvbnMvZXhlY3V0b3InO1xuaW1wb3J0IHsgRGljdGlvbmFyeSB9IGZyb20gJy4uLy4uL2NvbmZpZ3VyYXRpb24vaW50ZXJmYWNlcyc7XG5pbXBvcnQgQ09NTUFORF9UWVBFIGZyb20gJy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL3R5cGUnO1xuaW1wb3J0IENvbW1hbmRCYXNlIGZyb20gJy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL2Jhc2UnO1xuaW1wb3J0ICogYXMgc2VydmljZUNvbW1hbmRzIGZyb20gJy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL3NlcnZpY2UnO1xuXG5cbmNsYXNzIFRlc3RSdW5Qcm94eSB7XG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRyb2xsZXI6IFRlc3RDb250cm9sbGVyO1xuICAgIHB1YmxpYyByZWFkb25seSBvYnNlcnZlZENhbGxzaXRlczogT2JzZXJ2ZWRDYWxsc2l0ZXNTdG9yYWdlO1xuICAgIHB1YmxpYyByZWFkb25seSB3YXJuaW5nTG9nOiBXYXJuaW5nTG9nO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBkaXNwYXRjaGVyOiBUZXN0UnVuRGlzcGF0Y2hlclByb3RvY29sO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZml4dHVyZUN0eDogdW5rbm93bjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGN0eDogdW5rbm93bjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9vcHRpb25zOiBEaWN0aW9uYXJ5PE9wdGlvblZhbHVlPjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoZGlzcGF0Y2hlcjogVGVzdFJ1bkRpc3BhdGNoZXJQcm90b2NvbCwgaWQ6IHN0cmluZywgZml4dHVyZUN0eDogdW5rbm93biwgb3B0aW9uczogRGljdGlvbmFyeTxPcHRpb25WYWx1ZT4pIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyID0gZGlzcGF0Y2hlcjtcblxuICAgICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgICAgdGhpcy5jdHggICAgICAgID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5maXh0dXJlQ3R4ID0gZml4dHVyZUN0eDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyAgID0gb3B0aW9ucztcblxuICAgICAgICAvLyBUT0RPOiBTeW5jaHJvbml6ZSB0aGVzZSBwcm9wZXJ0aWVzIHdpdGggdGhlaXIgcmVhbCBjb3VudGVycGFydHMgaW4gdGhlIG1haW4gcHJvY2Vzcy5cbiAgICAgICAgLy8gUG9zdHBvbmVkIHVudGlsIChHSC0zMjQ0KS4gU2VlIGRldGFpbHMgaW4gKEdILTUyNTApLlxuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSAgICAgICAgbmV3IFRlc3RDb250cm9sbGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm9ic2VydmVkQ2FsbHNpdGVzID0gbmV3IE9ic2VydmVkQ2FsbHNpdGVzU3RvcmFnZSgpO1xuICAgICAgICB0aGlzLndhcm5pbmdMb2cgPSAgICAgICAgbmV3IFdhcm5pbmdMb2coKTtcblxuICAgICAgICB0ZXN0UnVuVHJhY2tlci5hY3RpdmVUZXN0UnVuc1tpZF0gPSB0aGlzO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2dldEFzc2VydGlvblRpbWVvdXQgKGNvbW1hbmQ6IEFzc2VydGlvbkNvbW1hbmQpOiBudW1iZXIge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IHsgdGltZW91dDogY29tbWFuZFRpbWVvdXQgfSA9IGNvbW1hbmQub3B0aW9ucztcblxuICAgICAgICByZXR1cm4gY29tbWFuZFRpbWVvdXQgPT09IHZvaWQgMFxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmFzc2VydGlvblRpbWVvdXRcbiAgICAgICAgICAgIDogY29tbWFuZFRpbWVvdXQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBfZXhlY3V0ZUFzc2VydGlvbiAoY29tbWFuZDogQXNzZXJ0aW9uQ29tbWFuZCwgY2FsbHNpdGU6IHVua25vd24pOiBQcm9taXNlPHVua25vd24+IHtcbiAgICAgICAgY29uc3QgYXNzZXJ0aW9uVGltZW91dCA9IHRoaXMuX2dldEFzc2VydGlvblRpbWVvdXQoY29tbWFuZCk7XG5cbiAgICAgICAgY29uc3QgZXhlY3V0b3IgPSBuZXcgQXNzZXJ0aW9uRXhlY3V0b3IoY29tbWFuZCwgYXNzZXJ0aW9uVGltZW91dCwgY2FsbHNpdGUpO1xuXG4gICAgICAgIGV4ZWN1dG9yLm9uY2UoJ3N0YXJ0LWFzc2VydGlvbi1yZXRyaWVzJywgdGltZW91dCA9PiB0aGlzLmV4ZWN1dGVDb21tYW5kKG5ldyBzZXJ2aWNlQ29tbWFuZHMuU2hvd0Fzc2VydGlvblJldHJpZXNTdGF0dXNDb21tYW5kKHRpbWVvdXQpKSk7XG4gICAgICAgIGV4ZWN1dG9yLm9uY2UoJ2VuZC1hc3NlcnRpb24tcmV0cmllcycsIHN1Y2Nlc3MgPT4gdGhpcy5leGVjdXRlQ29tbWFuZChuZXcgc2VydmljZUNvbW1hbmRzLkhpZGVBc3NlcnRpb25SZXRyaWVzU3RhdHVzQ29tbWFuZChzdWNjZXNzKSkpO1xuXG4gICAgICAgIHJldHVybiBleGVjdXRvci5ydW4oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZXhlY3V0ZUFjdGlvbiAoYXBpTWV0aG9kTmFtZTogc3RyaW5nLCBjb21tYW5kOiB1bmtub3duLCBjYWxsc2l0ZTogdW5rbm93bik6IFByb21pc2U8dW5rbm93bj4ge1xuICAgICAgICBpZiAoY2FsbHNpdGUpXG4gICAgICAgICAgICBjYWxsc2l0ZSA9IHByZXJlbmRlckNhbGxzaXRlKGNhbGxzaXRlKTtcblxuICAgICAgICBpZiAoKGNvbW1hbmQgYXMgQ29tbWFuZEJhc2UpLnR5cGUgPT09IENPTU1BTkRfVFlQRS5hc3NlcnRpb24pXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZUFzc2VydGlvbihjb21tYW5kIGFzIEFzc2VydGlvbkNvbW1hbmQsIGNhbGxzaXRlKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaGVyLmV4ZWN1dGVBY3Rpb24oeyBhcGlNZXRob2ROYW1lLCBjb21tYW5kLCBjYWxsc2l0ZSwgaWQ6IHRoaXMuaWQgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGV4ZWN1dGVDb21tYW5kIChjb21tYW5kOiB1bmtub3duKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoZXIuZXhlY3V0ZUNvbW1hbmQoeyBjb21tYW5kLCBpZDogdGhpcy5pZCB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRlc3RSdW5Qcm94eTtcblxuXG4iXX0=