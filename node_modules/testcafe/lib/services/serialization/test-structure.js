"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.restore = exports.serialize = exports.flatten = exports.isFixture = exports.isTest = void 0;
const lodash_1 = require("lodash");
const protocol_1 = require("../compiler/protocol");
const unit_type_1 = __importDefault(require("../../api/structure/unit-type"));
const RECURSIVE_PROPERTIES = ['testFile', 'fixture', 'currentFixture', 'collectedTests'];
function isProperty(object, property) {
    return object.hasOwnProperty(property);
}
function isTest(value) {
    return value.unitType === unit_type_1.default.test;
}
exports.isTest = isTest;
function isFixture(value) {
    return value.unitType === unit_type_1.default.fixture;
}
exports.isFixture = isFixture;
function mapProperties(object, properties, mapper) {
    for (const property of properties) {
        if (!isProperty(object, property))
            continue;
        const value = object[property];
        if (Array.isArray(value))
            object[property] = value.map(item => mapper({ item, property, object }));
        else
            object[property] = mapper({ item: object[property], property, object });
    }
}
function replaceTestFunctions(unit) {
    mapProperties(unit, protocol_1.TEST_FUNCTION_PROPERTIES, ({ item }) => !!item);
}
function restoreTestFunctions(unit, mapper) {
    mapProperties(unit, protocol_1.TEST_FUNCTION_PROPERTIES, ({ item, object, property }) => item ? mapper(object.id, property) : item);
}
function flattenRecursiveProperties(unit) {
    mapProperties(unit, RECURSIVE_PROPERTIES, ({ item }) => item.id);
}
function restoreRecursiveProperties(unit, units) {
    mapProperties(unit, RECURSIVE_PROPERTIES, ({ item }) => units[item]);
}
function flatten(tests) {
    const testFiles = lodash_1.uniq(tests.map(test => test.testFile));
    const fixtures = lodash_1.uniq(tests.map(test => test.fixture));
    return lodash_1.keyBy([...tests, ...fixtures, ...testFiles], unit => unit.id);
}
exports.flatten = flatten;
function serialize(units) {
    const result = {};
    for (const unit of Object.values(units)) {
        // @ts-ignore
        const copy = Object.assign({}, unit);
        replaceTestFunctions(copy);
        flattenRecursiveProperties(copy);
        result[copy.id] = copy;
    }
    return result;
}
exports.serialize = serialize;
function restore(units, mapper) {
    const list = Object.values(units);
    const result = [];
    for (const unit of list) {
        restoreRecursiveProperties(unit, units);
        restoreTestFunctions(unit, mapper);
    }
    for (const unit of list) {
        if (isTest(unit))
            result.push(unit);
    }
    return result;
}
exports.restore = restore;
//# sourceMappingURL=data:application/json;base64,